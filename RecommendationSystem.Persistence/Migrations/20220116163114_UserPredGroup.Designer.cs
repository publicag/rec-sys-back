// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RecommendationSystem.Persistence;

namespace RecommendationSystem.Persistence.Migrations
{
    [DbContext(typeof(RecommendationSystemDbContext))]
    [Migration("20220116163114_UserPredGroup")]
    partial class UserPredGroup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("RecommendationSystem.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date_time");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date_time");

                    b.Property<int?>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<int>("Name")
                        .HasColumnType("integer")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_genre");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("ix_genre_movie_id");

                    b.ToTable("genre");
                });

            modelBuilder.Entity("RecommendationSystem.Domain.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date_time");

                    b.Property<int>("ImdbId")
                        .HasColumnType("integer")
                        .HasColumnName("imdb_id");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date_time");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("TmdbId")
                        .HasColumnType("integer")
                        .HasColumnName("tmdb_id");

                    b.HasKey("Id")
                        .HasName("pk_movie");

                    b.ToTable("movie");
                });

            modelBuilder.Entity("RecommendationSystem.Domain.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date_time");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date_time");

                    b.Property<int?>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<float>("Rate")
                        .HasColumnType("real")
                        .HasColumnName("rate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_rating");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("ix_rating_movie_id");

                    b.ToTable("rating");
                });

            modelBuilder.Entity("RecommendationSystem.Domain.Entities.UserPredGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date_time");

                    b.Property<int>("FifthGroup")
                        .HasColumnType("integer")
                        .HasColumnName("fifth_group");

                    b.Property<float>("FifthGroupScore")
                        .HasColumnType("real")
                        .HasColumnName("fifth_group_score");

                    b.Property<int>("FirstGroup")
                        .HasColumnType("integer")
                        .HasColumnName("first_group");

                    b.Property<float>("FirstGroupScore")
                        .HasColumnType("real")
                        .HasColumnName("first_group_score");

                    b.Property<int>("FourthGroup")
                        .HasColumnType("integer")
                        .HasColumnName("fourth_group");

                    b.Property<float>("FourthGroupScore")
                        .HasColumnType("real")
                        .HasColumnName("fourth_group_score");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date_time");

                    b.Property<int>("SecondGroup")
                        .HasColumnType("integer")
                        .HasColumnName("second_group");

                    b.Property<float>("SecondGroupScore")
                        .HasColumnType("real")
                        .HasColumnName("second_group_score");

                    b.Property<int>("ThirdGroup")
                        .HasColumnType("integer")
                        .HasColumnName("third_group");

                    b.Property<float>("ThirdGroupScore")
                        .HasColumnType("real")
                        .HasColumnName("third_group_score");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_pred_group");

                    b.ToTable("user_pred_group");
                });

            modelBuilder.Entity("RecommendationSystem.Domain.Entities.UserPrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date_time");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date_time");

                    b.Property<int>("PredClass")
                        .HasColumnType("integer")
                        .HasColumnName("pred_class");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_pred");

                    b.ToTable("user_pred");
                });

            modelBuilder.Entity("RecommendationSystem.Domain.Entities.UserRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date_time");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date_time");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<float>("Rating")
                        .HasColumnType("real")
                        .HasColumnName("rating");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_rating");

                    b.ToTable("user_rating");
                });

            modelBuilder.Entity("RecommendationSystem.Domain.Entities.Genre", b =>
                {
                    b.HasOne("RecommendationSystem.Domain.Entities.Movie", null)
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("fk_genre_movie_movie_id");
                });

            modelBuilder.Entity("RecommendationSystem.Domain.Entities.Rating", b =>
                {
                    b.HasOne("RecommendationSystem.Domain.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .HasConstraintName("fk_rating_movie_movie_id");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("RecommendationSystem.Domain.Entities.Movie", b =>
                {
                    b.Navigation("Genres");
                });
#pragma warning restore 612, 618
        }
    }
}
